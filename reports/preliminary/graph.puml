@startuml
top to bottom direction

package "Model" #DDDDDD{
    class Game {
        - Timer timeWhite
        - Timer timeBlack
        - boolean isTimed
        - Board board
        - History history
        - Solver solver
        + boolean isOver()
        + String getStringHistory()
        + List<Move> getMovesHistory()
    }

    class History {
        - Stack<HistoryState> histStack
        - Stack<HistoryState> revertStack
        + Optional<HistoryState> getPrevious()
        + Optional<HistoryState> getNext()
        + addMove()
    }
    
    class HistoryState {
      - Board state
      - Move previousMove
      + Board getState()
      + Move getPreviousMove()
    }

    class Board {
        - Bitboard board
        - boolean player
        - boolean enPassant
        - boolean whiteShortCastle
        - boolean blackShortCastle
        - boolean whiteLongCastle
        - boolean blackLongCastle
        + List<Move> getAvailableMoves()
        + boolean makeMove(Move move)
        + Board getCopy()
        + boolean isAttacked(int i, int j)
        + boolean isCheck()
        + boolean isCheckMate()
        + String getPieceAt(int i, int j)
    }

    class Bitboard {
        - long[12] board
    }

    class Move {
        - String move
        + Piece getPiece()
        + getOriginalCol()
        + getOriginalRow()
        + getTargetCol()
        + getTargetRow()
        + Move getReverse()
        + String toString()
    }

    interface Piece {
        + {static} List<Move> getAvailableMoves(boolean isWhite, Board b, int col, int row)
    } 

    class Pawn {}
    class King {}
    class Queen {}
    class Rook {}
    class Bishop {}
    class Knight {}
    
    class Timer {
        - double timeRemainingGameEvent --> GameEventType
        + addTime(double time)
        + startTimer()
        + stopTimer()
    }

    package AI {
        class Solver {
            - Tree<AINode> aiHistory
            + Move getBestMove(Board board, String method, String heuristic, double time)
            - double evaluate(Board board, String heuristic)
            - Move ab_search(Board board, String heuristic, double time)
            - Move mtcs_search(Board board, String heuristic, double time)
        }

        class AINode {
            - HistoryNode hnode 
            - double value
        }

        class HistoryNode {
        - HistoryState state
        - HistoryNode parent 
        - List<HistoryNode> children
        + addChildren(HistoryNode)
    }
    }
}

package "View" #DDDDDD{
    interface Vue{
    + void updateBoard()
    }
    class CLIVue implements Vue
    class GameVue implements Vue
}

package "Controller" #DDDDDD{
    class GameController{
        - model Model
        - view View
        - BagOfCommands bagOfCommands
    }
  
    package Commands{
      interface Command{
          + execute(GameManager, Controller)
      }
        class PlayMoveCommand implements Command{
            - Position source
            - Position dest
        }

        class CancelMoveCommand implements Command{
        }

        class RestoreMoveCommand implements Command{
        }

        class RestartGameCommand implements Command{
        }

        class LoadGameCommand implements Command{
            - String filepath
        }

        class SaveGameCommand implements Command{
            - String filepath
        }
    }
    

    class BagOfCommands  <<(S,#FF7700)Singleton>>{
        - BagOfCommands instance
        - ConcurrentLinkedQueue<Command> commands
        - GameManager model
        - Controller controller
        - boolean isRunning
        - void processCommands()
        + BagOfCommands getInstance()
        + void executeFirst()
        + void executeAll()
        + void addCommand(Command)
        + void setModel(GameManager)
        + void setController(Controller)
    }
}

package "Events" #DDDDDD{
    abstract class EventSource {
        + void addObserver(EventObserver observer)
        + void removeObserver(EventObserver observer)
        + void notifyObservers()
    }

    interface EventObserver {
        + void onGameEvent()
    }
}

package "Utils" #DDDDDD{

    class TextGetter {
        - Locale locale
        - ResourceBundle messages
        + void init(Locale)
        + TextGetter getInstance()
        + String getText(String tag)
    }

    class Tree<T> {
        - T root
    }

    class Position{
        - int x
        - int y
        + int getX()
        + int getY()
    }
}

Main --> GameController
Game --> History
Board --> Move
Game --> Board
Game --> Solver
Game --> Timer
Game --|> EventSource
Board --> Bitboard
GameController --> Vue
GameController --> Game
History --> HistoryState
Solver --> Tree
Solver --> AINode
Vue ..|> EventObserver
AINode --> HistoryNode

Piece <|-- Pawn
Piece <|-- King
Piece <|-- Queen
Piece <|-- Rook
Piece <|-- Bishop
Piece <|-- Knight

@enduml
